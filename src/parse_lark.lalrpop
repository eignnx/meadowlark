use lalrpop_util::ParseError;

use crate::{
    UserError,
    ast::{
        Item,
        AliasBinding,
        LValue,
        Stmt,
        Instr,
        RValue,
        Reg,
        Directive,
        Offset,
        Base,
    }
};

grammar;

extern {
    type Error = UserError;
    type Location = usize;
}

match {
    r"\s+" => { },
    r"#[^\n\r]*[\n\r]*" => { }, // comments begin with #
    _,
}

pub Program: Vec<Item> = {
    <items: Item*> => items,
};


SubrOrIsr: bool = {
    "subr" => false,
    "isr" => true,
};

Item: Item = {
    "def" <name: LabelIdent> ":" "u16" "=" <value: Unsigned> ";" => Item::Const { name, value },
    <is_isr: SubrOrIsr> <subr_name: LabelIdent> "("
        <args: (AliasBinding ("," <AliasBinding>)*)?>
    ")"
    <save_regs: ("preserve" "("
        <(Reg ("," <Reg>)*)?>
    ")")?>
    "{" <body: Stmt*> "}" => Item::SubrDef {
        name: subr_name,
        is_isr: is_isr,

        args: args.map(|(first, rest)| {
            std::iter::once(first).chain(rest.into_iter()).collect()
        }).unwrap_or_default(),

        preserve_regs: save_regs.map(|opt| {
            match opt {
                Some((first, rest)) => {
                    std::iter::once(first).chain(rest.into_iter()).collect()
                },
                None => vec![],
            }
        }).unwrap_or_default(),

        body,
    },
    Directive => Item::Directive(<>),
}

Stmt: Stmt = {
    "restore" ";" => Stmt::Restore,
    "preserve" "(" <regs: (Reg ("," <Reg>)*)> ")" ";" => {
        let (first, rest) = regs;
        Stmt::Preserve(
            std::iter::once(first).chain(rest.into_iter()).collect(),
        )
    },
    "alias" <binding: AliasBinding> ";" => Stmt::DefAlias(binding),
    <instr: Instr> ";" => Stmt::Instr(instr),
    <label: LabelIdent> ":" => Stmt::Label(label.to_string()),
    <if_stmt: IfStmt> => if_stmt,
    <while_loop: WhileLoop> => while_loop,
    "loop" "{" <body: Stmt*> "}" => Stmt::Loop { body },
};

AliasBinding: AliasBinding = {
    <name: LabelIdent> "=>" <lvalue: LValue> => AliasBinding::ExplicitAlias(name.to_string(), lvalue),
    <name: LabelIdent> "=>" "{" <field_bindings: (<AliasBinding> ";")*> "}" => AliasBinding::Struct {
        var_name: name.to_string(),
        field_bindings,
    },
    <name: LabelIdent> => AliasBinding::ImplicitAlias(name.to_string()),
};

IfStmt: Stmt = {
    "if" <test_reg: RValue> "("
        <first: Instr> ";" <rest_test_cond: RestTestCond?>
    ")" "do" "{"
        <then_body: Stmt*>
    "}" <else_body: ("else" "{"
         <Stmt*>
    "}")?> => Stmt::If {
        test_reg,
        test_cond: std::iter::once(first).chain(rest_test_cond.into_iter().flatten()).collect(),
        consequent: then_body,
        alternative: else_body,
    },
};

WhileLoop: Stmt = {
    "while" <test_arg: RValue> "do" "{" <body: Stmt*> "}" => Stmt::While {
        test_arg,
        test_cond: vec![],
        body,
    },
    "while" <test_arg: RValue> "("
        <first: Instr> <rest_test_cond: RestTestCond?>
    ")" "do" "{" <body: Stmt*> "}" => Stmt::While {
        test_arg,
        test_cond: std::iter::once(first).chain(rest_test_cond.into_iter().flatten()).collect(),
        body,
    },
};

RestTestCond: Vec<Instr> = {
    <instrs: (<Instr> ";")+> => instrs,
};

Instr: Instr = {
    <op: OpName> => Instr { op, args: vec![] },
    <op: OpName> <fst: RValue> <rest: ("," <RValue>)*> => {
        let args = std::iter::once(fst).chain(rest.into_iter()).collect();
        Instr { op, args }
    },
};

LabelIdent: String = <id: r#"[a-zA-Z_.][a-zA-Z0-9_.]*"#> => id.to_string();
OpName: String = <op: r"![a-z]+"> => op[1..].to_string();

RValue: RValue = {
    <imm: Integer> => imm,
    <char_literal: CharLit> => char_literal,
    <string_literal: r#""[^"]*""#> => {
        RValue::String(string_literal[1..string_literal.len()-1].to_string())
    },
    r"&" <label: LabelIdent> => RValue::Label(label.to_string()),
    <var_name: LabelIdent> => RValue::Alias(var_name.to_string()),
    <lvalue: LValue> => RValue::LValue(lvalue),
};

CharLit: RValue = {
    <l: @L> <char_content: r"'[^']+'"> <r: @R> =>? Ok(RValue::Char(
        match &char_content[1..char_content.len()-1] {
            r"\n" => b'\n',
            r"\t" => b'\t',
            r"\r" => b'\r',
            r"\'" => b'\'',
            r"\\" => b'\\',
            r"\0" => b'\0',
            empty if empty.is_empty() => return Err(
                ParseError::User {
                    error: UserError {
                        msg: "character literal cannot be empty".to_string(),
                        span: (l, r),
                    }
                }
            ),
            text if text.len() == 1 => text.bytes().next().unwrap(),
            text => return Err(
                ParseError::User {
                    error: UserError {
                        msg: "character literal must be a single character".to_string(),
                        span: (l, r),
                    }
                }
            ),
        }
    )),
};

LValue: LValue = {
    <reg: Reg> => LValue::Reg(reg),
    "[" <offset: Offset> "]" => LValue::Indirection {
        base: None,
        offset: Some(offset),
    },
    "[" <base: Base> "]" => LValue::Indirection {
        base: Some(base),
        offset: None,
    },
    "[" <base: Base>  <offset: Offset> "]" => LValue::Indirection {
        base: Some(base),
        offset: Some(offset),
    },
};

Base: Base = {
    <reg: Reg> => Base::Reg(reg),
    <name: LabelIdent> => Base::AliasOrConst(name),
};

Offset: Offset = {
    <l:@L> <signed: Signed> <r: @R> =>? {
        if (-512..512).contains(&signed) {
            Ok(Offset::I10(signed))
        } else {
            Err(ParseError::User {
                error: UserError {
                    msg: format!("Offset immediate must fit in range -512..512. Received: {signed}"),
                    span: (l, r),
                }
            })
        }
    },
    "+" <konst: LabelIdent> => Offset::Const(konst),
    "-" <konst: LabelIdent> => Offset::NegatedConst(konst),
};

UintOrConst: RValue = {
    <uint: Unsigned> => RValue::Uint(uint),
    <const_name: LabelIdent> => RValue::Alias(const_name),
};

Integer: RValue = {
    <u: Unsigned> => RValue::Uint(u),
    <i: Signed> => RValue::Int(i),
};

Unsigned: u16 = {
    <n: r"0x[0-9a-fA-F]+"> => {
        let n = &n[2..].to_ascii_lowercase();
        return u16::from_str_radix(n, 16).expect("parse hexadecimal number");
    },
    <n: r"0o[01234567]+"> => {
        let n = &n[2..];
        return u16::from_str_radix(n, 8).expect("parse octal number");
    },
    <n: r"0b[01]+"> => {
        let n = &n[2..];
        return u16::from_str_radix(n, 2).expect("parse binary number");
    },
    <n: r"[0-9]+"> => n.parse().unwrap(),
};

Signed: i16 = {
    <n: r"(\+|\-)[0-9]+"> => {
        i16::from_str_radix(n, 10).expect("parse signed decimal number")
    },
    <l: @L> <n: r"(\+|\-)0x[0-9a-fA-F]+"> <r: @R> =>? {
        let sign = &n[..1];
        let digits = &n[3..].to_ascii_lowercase();
        let n = format!("{sign}{digits}");
        match i16::from_str_radix(&n, 16) {
            Err(e) => Err(ParseError::User {
                error: UserError {
                    msg: format!("Failed to parse signed hexadecimal number: `{n}` Cause: {:?}", e.kind()),
                    span: (l, r),
                }
            }),
            Ok(n) => Ok(n),
        }
    },
    <l: @L> <n: r"(\+|\-)0o[0-7]+"> <r: @R> =>? {
        let sign = &n[..1];
        let digits = &n[3..];
        let n = format!("{sign}{digits}");
        match i16::from_str_radix(&n, 8) {
            Err(e) => Err(ParseError::User {
                error: UserError {
                    msg: format!("Failed to parse signed octal number: `{n}` Cause: {:?}", e.kind()),
                    span: (l, r),
                }
            }),
            Ok(n) => Ok(n),
        }
    },
    <l: @L> <n: r"(\+|\-)0b[01]+"> <r: @R> =>? {
        let sign = &n[..1];
        let digits = &n[3..];
        let n = format!("{sign}{digits}");
        match i16::from_str_radix(&n, 2) {
            Err(e) => Err(ParseError::User {
                error: UserError {
                    msg: format!("Failed to parse signed binary number: `{n}` Cause: {:?}", e.kind()),
                    span: (l, r),
                }
            }),
            Ok(n) => Ok(n),
        }
    },
}

Reg: Reg = {
    <name: r"\$[a-z]+"> <id: r"[0-9]+"?> => {
        let name = name[1..].to_string(); // remove the "$" from the name
        if let Some(id) = id {
            let id = id.parse().unwrap();
            match (&name[..], id) {
                ("a", 0..=2) => Reg::Arg(id),
                ("s", 0..=2) => Reg::Saved(id),
                ("t", 0..=2) => Reg::Temp(id),
                ("k", 0..=1) => Reg::Kernel(id),
                _ => panic!("unknown register: `${}{}`", name, id),
            }
        } else {
            match &name[..] {
                "zero" => Reg::Zero,
                "rv" => Reg::Rv,
                "ra" => Reg::Ra,
                "gp" => Reg::Gp,
                "sp" => Reg::Sp,
                _ => panic!("unknown register: {}", name),
            }
        }
    }
};

Directive: Directive = {
    "[[addr(" <addr: Unsigned> ")]]" => Directive::Addr(addr),
    "[[data(" <l:@L> <first: RValue> <r:@R> <rest: ("," <@L> <RValue> <@R>)*> ")]]" =>? {
        let mut data = vec![];
        for (l, d, r) in [(l, first, r)].into_iter().chain(rest.into_iter()) {
            match d {
                RValue::Alias(..) => data.push(d),
                RValue::Uint(uint) => if let Err(e) = u8::try_from(uint) {
                        return Err(ParseError::User {
                            error: UserError {
                                msg: format!("Data element `{uint}` must fit in a byte (0..=255)."),
                                span: (l, r),
                            }
                        });
                    } else {
                        data.push(d);
                    },
                ref other => return Err(ParseError::User {
                    error: UserError {
                        msg: format!("Data element `{d:?}` must be a `u8` or the name of a const."),
                        span: (l, r),
                    }
                }),
            }
        }
        Ok(Directive::Data(data))
    },
};